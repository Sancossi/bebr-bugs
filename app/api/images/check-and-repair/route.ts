import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '../../../../src/lib/auth'
import { BugService } from '../../../../src/services/BugService'
import { ImageService } from '../../../../src/services/ImageService'

const bugService = new BugService()
const imageService = new ImageService()

export async function POST(req: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.id) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    console.log("üîß –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–∞–≥–∏ —Å Discord –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    const { bugs } = await bugService.getAllBugs({ limit: 1000 })
    
    let checkedCount = 0
    let brokenCount = 0
    let repairedCount = 0
    let errors = 0
    
    const results = []

    for (const bug of bugs) {
      if (!bug.screenshotUrl || !bug.screenshotUrl.includes('cdn.discordapp.com')) {
        continue
      }

      checkedCount++
      
      try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–∞–≥–∞ ${bug.id}...`)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const isAvailable = await imageService.checkImageAvailability(bug.screenshotUrl)
        
        if (!isAvailable) {
          brokenCount++
          console.log(`‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –±–∞–≥–∞ ${bug.id}: ${bug.screenshotUrl}`)
          
          // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Discord –∏ —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
          // –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Discord API
          
          results.push({
            bugId: bug.id,
            title: bug.title,
            originalUrl: bug.screenshotUrl,
            status: 'broken',
            action: 'needs_manual_check'
          })
        } else {
          results.push({
            bugId: bug.id,
            title: bug.title,
            originalUrl: bug.screenshotUrl,
            status: 'ok'
          })
        }
        
      } catch (error) {
        errors++
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±–∞–≥–∞ ${bug.id}:`, error)
        
        results.push({
          bugId: bug.id,
          title: bug.title,
          originalUrl: bug.screenshotUrl,
          status: 'error',
          error: error instanceof Error ? error.message : 'Unknown error'
        })
      }
    }
    
    const summary = {
      total: bugs.length,
      checked: checkedCount,
      broken: brokenCount,
      repaired: repairedCount,
      errors,
      timestamp: new Date().toISOString()
    }
    
    console.log("üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞:", summary)
    
    return NextResponse.json({
      success: true,
      summary,
      results
    })
    
  } catch (error) {
    console.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", error)
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : "Unknown error"
      },
      { status: 500 }
    )
  }
} 