const { PrismaClient: SQLitePrismaClient } = require('@prisma/client')
const { PrismaClient: PostgresPrismaClient } = require('@prisma/client')

// SQLite –∫–ª–∏–µ–Ω—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
const sqliteClient = new SQLitePrismaClient({
  datasources: {
    db: {
      url: "file:./dev.db"
    }
  }
})

// PostgreSQL –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
const postgresClient = new PostgresPrismaClient({
  datasources: {
    db: {
      url: process.env.DATABASE_URL
    }
  }
})

async function migrateData() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —Å SQLite –Ω–∞ PostgreSQL...')
    
    // –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë• –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
    const users = await sqliteClient.user.findMany({
      include: {
        accounts: true,
        sessions: true
      }
    })
    
    for (const user of users) {
      const { accounts, sessions, ...userData } = user
      
      await postgresClient.user.upsert({
        where: { id: user.id },
        create: userData,
        update: userData
      })
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
      for (const account of accounts) {
        await postgresClient.account.upsert({
          where: {
            provider_providerAccountId: {
              provider: account.provider,
              providerAccountId: account.providerAccountId
            }
          },
          create: account,
          update: account
        })
      }
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏
      for (const session of sessions) {
        await postgresClient.session.upsert({
          where: { id: session.id },
          create: session,
          update: session
        })
      }
    }
    
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)
    
    // –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–≥–æ–≤
    console.log('üêõ –ú–∏–≥—Ä–∏—Ä—É–µ–º –±–∞–≥–∏...')
    const bugs = await sqliteClient.bug.findMany({
      include: {
        comments: true
      }
    })
    
    for (const bug of bugs) {
      const { comments, customData, attachmentUrls, ...bugData } = bug
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ JSON –≤ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è PostgreSQL
      const processedBugData = {
        ...bugData,
        customData: customData ? JSON.parse(customData) : null,
        attachmentUrls: attachmentUrls ? JSON.parse(attachmentUrls) : null
      }
      
      await postgresClient.bug.upsert({
        where: { id: bug.id },
        create: processedBugData,
        update: processedBugData
      })
      
      // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      for (const comment of comments) {
        await postgresClient.comment.upsert({
          where: { id: comment.id },
          create: comment,
          update: comment
        })
      }
    }
    
    console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ ${bugs.length} –±–∞–≥–æ–≤`)
    
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    process.exit(1)
  } finally {
    await sqliteClient.$disconnect()
    await postgresClient.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
if (require.main === module) {
  migrateData()
}

module.exports = { migrateData } 