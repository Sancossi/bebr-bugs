generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  discordId     String?   @unique
  accounts      Account[]
  sessions      Session[]
  
  // Bug relations
  assignedBugs  Bug[]     @relation("AssignedTo")
  reportedBugs  Bug[]     @relation("ReportedBy")
  comments      Comment[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// PostgreSQL поддерживает enum'ы
enum BugType {
  Bug
  Feature
  Improvement
  Task
  Other
}

enum BugStatus {
  NEW
  IN_PROGRESS
  TESTING
  READY_TO_RELEASE
  CLOSED
  REQUIRES_DISCUSSION
  OUTDATED
}

enum BugPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Bug {
  id                String      @id @default(cuid())
  title             String
  description       String?
  type              BugType     @default(Other)
  status            BugStatus   @default(NEW)
  priority          BugPriority @default(MEDIUM)
  
  // Discord data
  discordMessageId  String?     @unique
  discordChannelId  String?
  discordThreadId   String?
  
  // Steam ID пользователя, который добавил баг
  steamId           String?
  
  // Game data
  level             String?
  playerPosition    String?
  cameraPosition    String?
  cameraRotation    String?
  fps               Float?
  gpu               String?
  cpu               String?
  os                String?
  ramTotal          String?
  currentRam        String?
  vram              String?
  currentVram       String?
  customData        Json?       // JSON data
  
  // Screenshots and attachments
  screenshotUrl     String?
  attachmentUrls    Json?       // JSON array of URLs
  
  // Relations
  reportedById      String?
  reportedBy        User?       @relation("ReportedBy", fields: [reportedById], references: [id])
  assignedToId      String?
  assignedTo        User?       @relation("AssignedTo", fields: [assignedToId], references: [id])
  
  comments          Comment[]
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Comment {
  id            String   @id @default(cuid())
  content       String
  attachmentUrl String?
  
  bugId         String
  bug           Bug      @relation(fields: [bugId], references: [id], onDelete: Cascade)
  
  authorId      String
  author        User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
} 