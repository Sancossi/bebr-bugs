import { Client, GatewayIntentBits } from "discord.js"

export class DiscordService {
  private client: Client
  private isReady = false

  constructor() {
    this.client = new Client({
      intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        // –í–ê–ñ–ù–û: MessageContent - –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π intent!
        // –ï–≥–æ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –≤ Discord Developer Portal -> Bot -> Privileged Gateway Intents
        GatewayIntentBits.MessageContent,
      ],
    })

    this.client.once("ready", () => {
      console.log("Discord bot –≥–æ—Ç–æ–≤!")
      this.isReady = true
    })

    this.client.on("error", (error) => {
      console.error("Discord bot –æ—à–∏–±–∫–∞:", error)
    })
  }

  async login() {
    if (!process.env.DISCORD_BOT_TOKEN) {
      throw new Error("DISCORD_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    }
    
    try {
      await this.client.login(process.env.DISCORD_BOT_TOKEN)
      
      // –ñ–¥–µ–º –ø–æ–∫–∞ –±–æ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è
      while (!this.isReady) {
        await new Promise(resolve => setTimeout(resolve, 100))
      }
    } catch (error) {
      if (error.message.includes('disallowed intents')) {
        throw new Error(
          "–û—à–∏–±–∫–∞: –ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ intents –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã!\n" +
          "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Discord Developer Portal -> Bot -> Privileged Gateway Intents\n" +
          "–∏ –≤–∫–ª—é—á–∏—Ç–µ 'MESSAGE CONTENT INTENT'"
        )
      }
      throw error
    }
  }

  async getMessagesFromChannel(channelId: string, limit = 50) {
    if (!this.isReady) {
      throw new Error("Discord bot –Ω–µ –≥–æ—Ç–æ–≤")
    }

    try {
      const channel = await this.client.channels.fetch(channelId)
      
      if (!channel || !channel.isTextBased()) {
        throw new Error(`–ö–∞–Ω–∞–ª ${channelId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º`)
      }

      const allMessages: any[] = []
      let lastMessageId: string | undefined = undefined
      const maxPerRequest = 100 // Discord API –ª–∏–º–∏—Ç
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Ä—Ü–∏—è–º–∏ –ø–æ 100
      while (allMessages.length < limit) {
        const remainingLimit = Math.min(maxPerRequest, limit - allMessages.length)
        
        const fetchOptions: any = { limit: remainingLimit }
        if (lastMessageId) {
          fetchOptions.before = lastMessageId
        }
        
        const messages = await channel.messages.fetch(fetchOptions)
        const messagesArray: any[] = []
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Collection –≤ –º–∞—Å—Å–∏–≤ —Å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
        ;(messages as any).forEach((message: any) => {
          messagesArray.push(message)
        })
        
        if (messagesArray.length === 0) {
          break // –ë–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç
        }
        
        allMessages.push(...messagesArray)
        const lastMessage = messagesArray[messagesArray.length - 1]
        lastMessageId = lastMessage?.id
        
        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (messagesArray.length < remainingLimit) {
          break
        }
      }
      
      console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ ${allMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ ${channelId}`)
      
      // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∞–∫—Ü–∏—è—Ö (–±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è)
      for (const message of allMessages) {
        if (message.reactions && message.reactions.cache && message.reactions.cache.size > 0) {
          const reactions: any[] = []
          
          try {
            ;(message.reactions.cache as any).forEach((reaction: any) => {
              if (reaction.emoji) {
                reactions.push({
                  emoji: {
                    name: reaction.emoji.name || '',
                    id: reaction.emoji.id || null
                  },
                  count: reaction.count || 0
                })
              }
            })
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –∫ –æ–±—ä–µ–∫—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
            ;(message as any).reactionsData = reactions
          } catch (reactionError) {
            console.warn(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${message.id}:`, reactionError)
          }
        }
      }
      
      return allMessages
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ ${channelId}:`, error)
      throw error
    }
  }

  async getMessagesFromChannels(channelIds: string[], limit = 50) {
    const allMessages = []
    
    for (const channelId of channelIds) {
      try {
        const messages = await this.getMessagesFromChannel(channelId, limit)
        allMessages.push(...messages)
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ ${channelId}:`, error)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
      }
    }
    
    return allMessages
  }

  async disconnect() {
    await this.client.destroy()
  }
}
