import { BugDAO } from '../dao/BugDAO'
import { CommentDAO } from '../dao/CommentDAO'
import { UserDAO } from '../dao/UserDAO'
import { BugWithRelations, CreateBugRequest, UpdateBugRequest, CreateCommentRequest, DiscordBugReport } from '../types'
import { BugStatus, BugType, BugPriority } from '../types'
import { DiscordReactionService } from './DiscordReactionService'

export class BugService {
  private bugDAO: BugDAO
  private commentDAO: CommentDAO
  private userDAO: UserDAO

  constructor() {
    this.bugDAO = new BugDAO()
    this.commentDAO = new CommentDAO()
    this.userDAO = new UserDAO()
  }

  async createBug(data: CreateBugRequest, reportedById?: string): Promise<BugWithRelations> {
    const bug = await this.bugDAO.create({
      ...data,
      reportedById,
      createdAt: new Date(), // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±–∞–≥–æ–≤
    })

    return await this.getBugById(bug.id) as BugWithRelations
  }

  async createBugFromDiscord(discordData: DiscordBugReport): Promise<BugWithRelations | null> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –±–∞–≥ —Å —Ç–∞–∫–∏–º Discord message ID
    const existingBug = await this.bugDAO.findByDiscordMessageId(discordData.id)
    if (existingBug) {
      // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–∞–≥ —Å steamId, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      const updatedBug = await this.updateExistingBugWithSteamId(existingBug, discordData)
      if (updatedBug) {
        return updatedBug as BugWithRelations
      }
      return await this.getBugById(existingBug.id) as BugWithRelations
    }

    const embed = discordData.embeds[0]
    if (!embed) return null

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Discord embed
    const fields = embed.fields || []
    const getFieldValue = (name: string) => fields.find(f => f.name === name)?.value

    const type = this.parseDiscordBugType(getFieldValue('type') || 'Other')
    const title = embed.title || 'Untitled Bug'
    const description = embed.description || ''

    // –ü–∞—Ä—Å–∏–º Steam ID
    const steamId = this.parseSteamIdFromDiscord(discordData)

    // –ü–∞—Ä—Å–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const level = getFieldValue('level')
    const playerPosition = getFieldValue('player_position')
    const cameraPosition = getFieldValue('camera_position')
    const cameraRotation = getFieldValue('camera_rotation')
    const fps = parseFloat(getFieldValue('fps') || '0') || undefined
    const gpu = getFieldValue('gpu')
    const cpu = getFieldValue('cpu')
    const os = getFieldValue('os')
    const ramTotal = getFieldValue('ram_total')
    const currentRam = getFieldValue('current_ram')
    const vram = getFieldValue('vram')
    const currentVram = getFieldValue('current_vram')
    const customData = getFieldValue('custom_data')

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–∫—Ü–∏–π Discord
    const status = DiscordReactionService.getStatusFromReactions(discordData.reactions || [])
    
    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const createdAt = new Date(discordData.timestamp)

    // –ò–∑–≤–ª–µ–∫–∞–µ–º URL —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    const screenshotUrl = embed.image?.url
    
    const bug = await this.bugDAO.create({
      title,
      description,
      type,
      status, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ —Ä–µ–∞–∫—Ü–∏–π –≤–º–µ—Å—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ NEW
      priority: BugPriority.MEDIUM,
      steamId, // –î–æ–±–∞–≤–ª—è–µ–º Steam ID
      discordMessageId: discordData.id,
      discordChannelId: discordData.channel_id,
      discordThreadId: discordData.thread?.id,
      level,
      playerPosition,
      cameraPosition,
      cameraRotation,
      fps,
      gpu,
      cpu,
      os,
      ramTotal,
      currentRam,
      vram,
      currentVram,
      customData,
      screenshotUrl,
      createdAt, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∏–∑ Discord —Å–æ–æ–±—â–µ–Ω–∏—è
    })

    if (steamId) {
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –±–∞–≥ "${title}" —Å Steam ID: ${steamId}`)
    } else {
      console.log(`‚ö†Ô∏è –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –±–∞–≥ "${title}" –±–µ–∑ Steam ID`)
    }

    return await this.getBugById(bug.id) as BugWithRelations
  }

  async getBugById(id: string): Promise<BugWithRelations | null> {
    return await this.bugDAO.findById(id)
  }

  async getBugByDiscordMessageId(discordMessageId: string): Promise<any> {
    return await this.bugDAO.findByDiscordMessageId(discordMessageId)
  }

  async getAllBugs(params: {
    status?: BugStatus
    type?: BugType
    assignedToId?: string
    reportedById?: string
    search?: string
    steamId?: string
    level?: string
    page?: number
    limit?: number
  } = {}): Promise<{ bugs: BugWithRelations[], total: number, totalPages: number }> {
    const { page = 1, limit = 20, ...filters } = params
    const skip = (page - 1) * limit

    const [bugs, total] = await Promise.all([
      this.bugDAO.findAll({ ...filters, skip, take: limit }),
      this.bugDAO.count(filters),
    ])

    return {
      bugs,
      total,
      totalPages: Math.ceil(total / limit),
    }
  }

  async updateBug(id: string, data: UpdateBugRequest): Promise<BugWithRelations> {
    await this.bugDAO.update(id, data)
    return await this.getBugById(id) as BugWithRelations
  }

  async updateBugStatus(id: string, status: BugStatus): Promise<BugWithRelations> {
    await this.bugDAO.updateStatus(id, status)
    return await this.getBugById(id) as BugWithRelations
  }

  async deleteBug(id: string): Promise<void> {
    await this.bugDAO.delete(id)
  }

  async addComment(bugId: string, authorId: string, data: CreateCommentRequest): Promise<BugWithRelations> {
    await this.commentDAO.create(bugId, authorId, data)
    return await this.getBugById(bugId) as BugWithRelations
  }

  async getKanbanData(): Promise<Record<BugStatus, BugWithRelations[]>> {
    const statusCounts = await this.bugDAO.getStatusCounts()
    
    const kanbanData: Record<BugStatus, BugWithRelations[]> = {
      NEW: [],
      IN_PROGRESS: [],
      TESTING: [],
      READY_TO_RELEASE: [],
      CLOSED: [],
      REQUIRES_DISCUSSION: [],
      OUTDATED: [],
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    for (const status of Object.keys(kanbanData) as BugStatus[]) {
      kanbanData[status] = await this.bugDAO.findAll({ status, take: 150 })
    }

    return kanbanData
  }

  async getStatistics(): Promise<{
    total: number
    byStatus: Record<BugStatus, number>
    byType: Record<BugType, number>
  }> {
    const [total, byStatus] = await Promise.all([
      this.bugDAO.count(),
      this.bugDAO.getStatusCounts(),
    ])

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    const byType: Record<BugType, number> = {
      Bug: 0,
      Feature: 0,
      Improvement: 0,
      Task: 0,
      Other: 0,
    }

    return { total, byStatus, byType }
  }

  private parseDiscordBugType(discordType: string): BugType {
    switch (discordType.toLowerCase()) {
      case 'gameplay':
      case 'bug':
        return BugType.Bug
      case 'gameideas':
      case 'feature':
        return BugType.Feature
      case 'ui':
      case 'improvement':
        return BugType.Improvement
      case 'performance':
      case 'task':
        return BugType.Task
      case 'audio':
      case 'graphics':
      case 'network':
      default:
        return BugType.Other
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç Steam ID –∏–∑ Discord embed –ø–æ–ª–µ–π
   */
  private parseSteamIdFromDiscord(discordData: DiscordBugReport): string | null {
    const embed = discordData.embeds[0]
    if (!embed) {
      console.log('üîç Steam ID Parser: –ù–µ—Ç embed –¥–∞–Ω–Ω—ã—Ö')
      return null
    }

    console.log('üîç Steam ID Parser: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ Steam ID...')
    console.log('üîç Embed title:', embed.title)
    console.log('üîç Embed description:', embed.description?.substring(0, 200) + '...')
    console.log('ÔøΩÔøΩ Discord content:', discordData.content?.substring(0, 200) + '...')

    const fields = embed.fields || []
    const getFieldValue = (name: string) => fields.find(f => f.name === name)?.value

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ Steam ID –≤ —Ç–µ–∫—Å—Ç–µ
    const extractSteamIdFromText = (text: string): string | null => {
      if (!text) return null
      
      // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "Owner: 76561198258455447" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "76561198258455447"
      const steamIdPatterns = [
        /Owner:\s*(\d{17})/i,
        /Steam\s*ID:\s*(\d{17})/i,
        /SteamID:\s*(\d{17})/i,
        /Player:\s*(\d{17})/i,
        /User:\s*(\d{17})/i,
        /"Owner:\s*(\d{17})"/i, // JSON —Ñ–æ—Ä–º–∞—Ç
        /"(\d{17})":\s*"SteamName:/i, // –§–æ—Ä–º–∞—Ç "76561198258455447": "SteamName:
        /(\d{17})/g // –õ—é–±–æ–µ 17-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Steam ID64)
      ]

      for (const pattern of steamIdPatterns) {
        const match = text.match(pattern)
        if (match && match[1]) {
          const steamId = match[1].trim()
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ Steam ID (17 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 765)
          if (steamId.length === 17 && steamId.startsWith('765')) {
            console.log(`üéØ Steam ID –Ω–∞–π–¥–µ–Ω –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É ${pattern}: ${steamId}`)
            return steamId
          }
        }
      }
      return null
    }

    // –ò—â–µ–º Steam ID –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª—è—Ö
    const steamIdFields = [
      'steam_id',
      'steamid', 
      'steam',
      'player_id',
      'user_id',
      'userid',
      'owner'
    ]

    console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è embed:', fields.map(f => f.name))

    for (const fieldName of steamIdFields) {
      const fieldValue = getFieldValue(fieldName)
      if (fieldValue && fieldValue.trim()) {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ "${fieldName}":`, fieldValue.substring(0, 100) + '...')
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å Steam ID –∏–∑ —Ç–µ–∫—Å—Ç–∞
        const steamId = extractSteamIdFromText(fieldValue)
        if (steamId) return steamId
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        const cleanedValue = fieldValue.trim().replace(/[<>@]/g, '')
        if (cleanedValue.length > 0) {
          console.log(`üîç –û—á–∏—â–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è "${fieldName}":`, cleanedValue)
          return cleanedValue
        }
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ embed –Ω–∞ –Ω–∞–ª–∏—á–∏–µ Steam ID
    if (embed.description) {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ embed...')
      const steamId = extractSteamIdFromText(embed.description)
      if (steamId) return steamId
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö —Å Steam ID
    for (const field of fields) {
      if (field.value) {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ "${field.name}" –Ω–∞ –Ω–∞–ª–∏—á–∏–µ Steam ID...`)
        const steamId = extractSteamIdFromText(field.value)
        if (steamId) return steamId
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç Discord —Å–æ–æ–±—â–µ–Ω–∏—è
    if (discordData.content) {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç Discord —Å–æ–æ–±—â–µ–Ω–∏—è...')
      const steamId = extractSteamIdFromText(discordData.content)
      if (steamId) return steamId
    }

    console.log('‚ùå Steam ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏')
    return null
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–∞–≥ –∏–∑ Discord, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ –±—ã–ª–æ steamId
   */
  private async updateExistingBugWithSteamId(existingBug: any, discordData: DiscordBugReport): Promise<any | null> {
    const embed = discordData.embeds[0]
    if (!embed) return null

    let hasUpdates = false
    const updates: any = {}

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º steamId, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!existingBug.steamId) {
      const steamId = this.parseSteamIdFromDiscord(discordData)
      if (steamId) {
        updates.steamId = steamId
        hasUpdates = true
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω Steam ID –¥–ª—è –±–∞–≥–∞ "${existingBug.title}": ${steamId}`)
      }
    }

    // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ Discord
    const newScreenshotUrl = embed.image?.url
    if (newScreenshotUrl && newScreenshotUrl !== existingBug.screenshotUrl) {
      updates.screenshotUrl = newScreenshotUrl
      hasUpdates = true
      console.log(`üñºÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–∞–≥–∞ "${existingBug.title}"`)
      console.log(`   –°—Ç–∞—Ä–∞—è: ${existingBug.screenshotUrl || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`)
      console.log(`   –ù–æ–≤–∞—è: ${newScreenshotUrl}`)
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
    if (hasUpdates) {
      await this.bugDAO.update(existingBug.id, updates)
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –±–∞–≥ "${existingBug.title}" —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏`)
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–≥
      return await this.getBugById(existingBug.id)
    }

    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    return null
  }

  /**
   * –ü–æ–∏—Å–∫ –±–∞–≥–æ–≤ –ø–æ Steam ID
   */
  async searchBugsBySteamId(steamId: string): Promise<BugWithRelations[]> {
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –ø–æ–∏—Å–∫, –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    return await this.bugDAO.findAll({ 
      steamId: steamId,
      take: 100 
    })
  }
} 