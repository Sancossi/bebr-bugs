import fs from 'fs'
import path from 'path'
import { createWriteStream } from 'fs'
import { pipeline } from 'stream'
import { promisify } from 'util'

const streamPipeline = promisify(pipeline)

export class ImageService {
  private uploadDir: string

  constructor() {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –≤ public/uploads
    this.uploadDir = path.join(process.cwd(), 'public', 'uploads')
    this.ensureUploadDir()
  }

  private ensureUploadDir() {
    if (!fs.existsSync(this.uploadDir)) {
      fs.mkdirSync(this.uploadDir, { recursive: true })
      console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫:', this.uploadDir)
    }
  }

  /**
   * –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Discord CDN –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
   */
  async downloadDiscordImage(url: string, bugId: string): Promise<string | null> {
    try {
      console.log('üì• –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', url)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Discord CDN —Å—Å—ã–ª–∫–∞
      if (!url.includes('cdn.discordapp.com')) {
        console.log('‚ö†Ô∏è –ù–µ Discord CDN —Å—Å—ã–ª–∫–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å')
        return url
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ URL
      const urlParts = url.split('/')
      const fileName = urlParts[urlParts.length - 1]
      const fileExtension = fileName.split('.')[1]?.split('?')[0] || 'png'
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
      const localFileName = `bug_${bugId}_${Date.now()}.${fileExtension}`
      const localFilePath = path.join(this.uploadDir, localFileName)
      const publicUrl = `/uploads/${localFileName}`

      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const response = await fetch(url)
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      const fileStream = createWriteStream(localFilePath)
      await streamPipeline(response.body as any, fileStream)

      console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', publicUrl)
      return publicUrl

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error)
      return null
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
   */
  async checkImageAvailability(url: string): Promise<boolean> {
    try {
      const response = await fetch(url, { method: 'HEAD' })
      return response.ok
    } catch (error) {
      return false
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  async deleteLocalImage(publicUrl: string): Promise<boolean> {
    try {
      if (!publicUrl.startsWith('/uploads/')) {
        return false
      }

      const fileName = publicUrl.replace('/uploads/', '')
      const filePath = path.join(this.uploadDir, fileName)

      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath)
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', publicUrl)
        return true
      }
      
      return false
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error)
      return false
    }
  }
} 